# ################################
# Model: Speaker identification with ECAPA
# Authors: Hwidong Na & Mirco Ravanelli
# ################################

# Basic parameters
seed: 1986
__set_seed: !apply:torch.manual_seed [!ref <seed>]

data_folder: /home/ujinne/workspaces/datasets/speaker_id/data # data
output_folder: !ref ./results # results/ecapa_augment/<seed>
save_folder: !ref <output_folder>/save # <output_folder>/save
train_log: !ref <output_folder>/train_log.txt
# noise_folder: /home/ubuntu/speaker_recognition/ujinne/project/test_data

# # Pretrain folder (HuggingFace)
# pretrained_path: speechbrain/spkrec-ecapa-voxceleb
# # pretrained_path: /home/ujinne/workspaces/projects/speaker/results/save/CKPT+2022-08-22+15-35-43+00

train_annotation: train.json
valid_annotation: valid.json
test_annotation: test.json

# Folder to extract data augmentation files
rir_folder: !ref /home/ujinne/workspaces/datasets/speaker_id # Change it if needed

# Logging + checkpoints
train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

error_stats: !name:speechbrain.utils.metric_stats.MetricStats
    metric: !name:speechbrain.nnet.losses.classification_error
        reduction: batch

skip_prep: False
ckpt_interval_minutes: 15 # save checkpoint every N min

# Training parameters
number_of_epochs: 25
batch_size: 5 # 32
lr: 0.001
base_lr: 0.00000001
max_lr: !ref <lr>
step_size: 65000
sample_rate: 16000
sentence_len: 3.0 # seconds
shuffle: True
random_chunk: True

# Feature parameters
n_mels: 80
left_frames: 0
right_frames: 0
deltas: False

# Number of speakers
# out_n_neurons: 7205 #1211 for vox1  # 5994 for vox2, 7205 for vox1+vox2
out_n_neurons: 3101 # number of AI Hub datasets speakers

dataloader_options:
    batch_size: !ref <batch_size>
    shuffle: !ref <shuffle>
    num_workers: 8 #2

# Functions
compute_features: !new:speechbrain.lobes.features.Fbank
    n_mels: !ref <n_mels>
    left_frames: !ref <left_frames>
    right_frames: !ref <right_frames>
    deltas: !ref <deltas>

embedding_model: !new:speechbrain.lobes.models.ECAPA_TDNN.ECAPA_TDNN
    input_size: !ref <n_mels>
    channels: [1024, 1024, 1024, 1024, 3072]
    kernel_sizes: [5, 3, 3, 3, 1]
    dilations: [1, 2, 3, 4, 1]
    groups: [1, 1, 1, 1, 1]
    attention_channels: 128
    lin_neurons: 192

classifier: !new:speechbrain.lobes.models.ECAPA_TDNN.Classifier
    input_size: 192
    out_neurons: !ref <out_n_neurons>

epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>


augment_wavedrop: !new:speechbrain.lobes.augment.TimeDomainSpecAugment
    sample_rate: !ref <sample_rate>
    speeds: [100]

augment_speed: !new:speechbrain.lobes.augment.TimeDomainSpecAugment
    sample_rate: !ref <sample_rate>
    speeds: [95, 100, 105]

add_rev: !new:speechbrain.lobes.augment.EnvCorrupt
    openrir_folder: !ref <rir_folder>
    openrir_max_noise_len: 3.0  # seconds
    reverb_prob: 1.0
    noise_prob: 0.0
    noise_snr_low: 0
    noise_snr_high: 15
    rir_scale_factor: 1.0

add_noise: !new:speechbrain.lobes.augment.EnvCorrupt
    openrir_folder: !ref <rir_folder>
    openrir_max_noise_len: 3.0  # seconds
    reverb_prob: 0.0
    noise_prob: 1.0
    noise_snr_low: 0
    noise_snr_high: 15
    rir_scale_factor: 1.0

add_rev_noise: !new:speechbrain.lobes.augment.EnvCorrupt
    openrir_folder: !ref <rir_folder>
    openrir_max_noise_len: 3.0  # seconds
    reverb_prob: 1.0
    noise_prob: 1.0
    noise_snr_low: 0
    noise_snr_high: 15
    rir_scale_factor: 1.0


# Definition of the augmentation pipeline.
# If concat_augment = False, the augmentation techniques are applied
# in sequence. If concat_augment = True, all the augmented signals
# # are concatenated in a single big batch.

augment_pipeline: [
    !ref <augment_wavedrop>,
    !ref <augment_speed>,
    !ref <add_rev>,
    !ref <add_noise>,
    !ref <add_rev_noise>
]
concat_augment: True

mean_var_norm: !new:speechbrain.processing.features.InputNormalization
    norm_type: sentence
    std_norm: False

mean_var_norm_emb: !new:speechbrain.processing.features.InputNormalization
    norm_type: global
    std_norm: False

modules:
    compute_features: !ref <compute_features>
    augment_wavedrop: !ref <augment_wavedrop>
    augment_speed: !ref <augment_speed>
    add_rev: !ref <add_rev>
    add_noise: !ref <add_noise>
    add_rev_noise: !ref <add_rev_noise>
    embedding_model: !ref <embedding_model>
    classifier: !ref <classifier>
    mean_var_norm: !ref <mean_var_norm>
    mean_var_norm_emb: !ref <mean_var_norm_emb>

compute_cost: !new:speechbrain.nnet.losses.LogSoftmaxWrapper
    loss_fn: !new:speechbrain.nnet.losses.AdditiveAngularMargin
        margin: 0.2
        scale: 30

# compute_error: !name:speechbrain.nnet.losses.classification_error

opt_class: !name:torch.optim.Adam
    lr: !ref <lr>
    weight_decay: 0.000002

label_encoder: !new:speechbrain.dataio.encoder.CategoricalEncoder

lr_annealing: !new:speechbrain.nnet.schedulers.CyclicLRScheduler
    base_lr: !ref <base_lr>
    max_lr: !ref <max_lr>
    step_size: !ref <step_size>

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        embedding_model: !ref <embedding_model>
        classifier: !ref <classifier>
        normalizer: !ref <mean_var_norm>
        counter: !ref <epoch_counter>
        lr_annealing: !ref <lr_annealing>


# pretrainer: !new:speechbrain.utils.parameter_transfer.Pretrainer
#     loadables:
#         embedding_model: !ref <embedding_model>
#         mean_var_norm_emb: !ref <mean_var_norm_emb>
#         classifier: !ref <classifier>
#         label_encoder: !ref <label_encoder>
#     paths:
#         embedding_model: !ref <pretrained_path>/embedding_model.ckpt
#         mean_var_norm_emb: !ref <pretrained_path>/mean_var_norm_emb.ckpt
#         classifier: !ref <pretrained_path>/classifier.ckpt
#         label_encoder: !ref <pretrained_path>/label_encoder.txt